using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GraphApplicationForms
{
    public class GraphDeclare<L> : IEnumerable<L>
    {

        private ListOfNodes<L> setOfNodes;

        //constructors
        public GraphDeclare() : this(null) { }

        public GraphDeclare(ListOfNodes<L> setOfNodes)
        {

            if (setOfNodes == null)
            {
                this.setOfNodes = new ListOfNodes<L>();

            }
            else
            {
                this.setOfNodes = setOfNodes;
            }

        }

        public void AddNode(DirectedGraphNode<L> node) // call a method to add a node to the graph
        {
            setOfNodes.Add(node);
            
        }
        public void AddDirectedEdgeToTheGraph(L valueA, L valueB, int weightings)
        {
                                           
            DirectedGraphNode<L> nodeA = (DirectedGraphNode<L>)setOfNodes.FindByValue(valueA); //look for node a and node be in the list
            DirectedGraphNode<L> nodeB = (DirectedGraphNode<L>)setOfNodes.FindByValue(valueB);   //assign values and then connect both with a weight length
            //one sample test data contains both a to and a from route so I use an undirected way of connecting those 2 nodes
                nodeA.NeighbourNodes.Add(nodeB);
                nodeA.Weightings.Add(weightings);     
        }


        public Boolean containsValue(L value) //method to check if list contains a node
        {
            return setOfNodes.FindByValue(value) != null;
        }

        //methods left out, remove, add undirected edge etc
        public ListOfNodes<L> nodeSet 
        {
            get
            {
                return setOfNodes;
            }

        }

        public int CounterOfNodes  //count how many nodes in the list
        {
            get
            {
                return setOfNodes.Count;
            }
        }






































































































































































































































































































































































































































































































































































































































































        public IEnumerator<L> GetEnumerator()
        {
            throw new NotImplementedException();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            throw new NotImplementedException();
        }
    }//end of class
}
